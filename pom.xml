<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>libcal-proxy</artifactId>
  <version>${revision}</version>
  <name>LibCal-Proxy</name>
  <description>A proxy that handles LibCal's OAuth authorization</description>
  <url>https://github.com/uclalibrary/libcal-proxy</url>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:uclalibrary/libcal-proxy.git</connection>
    <developerConnection>scm:git:git@github.com:uclalibrary/libcal-proxy.git</developerConnection>
    <url>git@github.com:uclalibrary/libcal-proxy.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/uclalibrary/libcal-proxy/issues</url>
  </issueManagement>

  <properties>
    <vertx.version>4.3.1</vertx.version>
    <freelib.utils.version>3.0.1</freelib.utils.version>
    <freelib.maven.version>0.3.1</freelib.maven.version>

    <!-- Security update overrides -->
    <slf4j.ext.version>1.7.36</slf4j.ext.version>
    <jackson.databind.version>2.13.2.1</jackson.databind.version>

    <!-- Build plugin versions -->
    <vertx.plugin.version>1.0.27</vertx.plugin.version>
    <clean.plugin.version>3.1.0</clean.plugin.version>
    <docker.plugin.version>0.39.1</docker.plugin.version>
    <deploy.plugin.version>2.8.2</deploy.plugin.version>
    <jar.plugin.version>3.2.2</jar.plugin.version>

    <!-- Test dependency versions -->
    <junit.version>5.8.0-M1</junit.version>

    <!-- Docker component versions -->
    <docker.alpine.version>3.15.3</docker.alpine.version>

    <!-- Name of the main Vert.x verticle -->
    <vertx.verticle>edu.ucla.library.libcal.verticles.MainVerticle</vertx.verticle>

    <!-- The default configs for the application; overridable via ENV -->
    <http.port>8888</http.port>
    <heap.size>2g</heap.size>

    <!-- The default logging level for the application -->
    <logLevel>ERROR</logLevel>

    <!-- Testing properties -->
    <live.test.reloads>false</live.test.reloads>

    <!-- The Docker registry user and password used for publishing images -->
    <docker.registry.username />
    <docker.registry.password />
    <!-- The Docker registry account, if supplied, must end with a slash (e.g. "account/") -->
    <docker.registry.account />

    <!-- LibCal OAuth credentials and endpoint -->
    <libcal.client1.id>A_CLIENT1_ID</libcal.client1.id>
    <libcal.client2.id>A_CLIENT2_ID</libcal.client2.id>
    <libcal.client1.secret>A_CLIENT1_SECRET</libcal.client1.secret>
    <libcal.client2.secret>A_CLIENT2_SECRET</libcal.client2.secret>
    <libcal.token.endpoint>A_TOKEN_ENDPOINT</libcal.token.endpoint>
    <libcal.base.url>A_BASE_URL</libcal.base.url>
    <libcal.authentication.retry.count></libcal.authentication.retry.count>
    <libcal.authentication.retry.delay></libcal.authentication.retry.delay>
    <libcal.authentication.expires_in.padding></libcal.authentication.expires_in.padding>

  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <!-- The default scope from the parent is 'test' so we have to override here -->
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-service-proxy</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-codegen</artifactId>
      <classifier>processor</classifier>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-config</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-auth-oauth2</artifactId>
    </dependency>

    <!-- Below is a dependency that needs updating due to security issue (may be able to remove in future) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-ext</artifactId>
      <version>${slf4j.ext.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.databind.version}</version>
    </dependency>

    <!-- Below dependencies only used for testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>logback-test.xml</include>
        </includes>
      </testResource>
    </testResources>

    <plugins>
      <!-- Cleans up generated source code -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${clean.plugin.version}</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>src/main/generated</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!-- Configures the compiler to work with the vertx-codegen dependency (if necessary) -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!-- Incremental compilation causes problems with vertx-codegen: https://bitly.com/3LpCY0A+ -->
          <useIncrementalCompilation>false</useIncrementalCompilation>
        </configuration>
      </plugin>

      <!-- Sets http.test.port for testing the application -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <!-- Processes resources codes and generates media types -->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-maven-plugins</artifactId>
        <executions>
          <execution>
            <id>generate-media-types</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate-mediatype</goal>
            </goals>
            <configuration>
              <mediaTypePackage>edu.ucla.library.libcal</mediaTypePackage>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Checks code for best practices, performance, etc. -->
      <plugin>
        <artifactId>maven-pmd-plugin</artifactId>
      </plugin>

      <!-- Formats code according to our project's rules -->
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
      </plugin>

      <!-- Generates Javadocs documentation -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <additionalJOptions>
            <additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${project.name}</additionalJOption>
          </additionalJOptions>
          <links>
            <link>https://vertx.io/docs/apidocs/</link>
          </links>
        </configuration>
      </plugin>

      <!-- Checks that conforms to our project's rules -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <!-- Enforces rules like: no snapshot dependencies, etc. -->
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <!-- Unpacks build tools from upstream parent project -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>

      <!-- Runs unit tests on the application's code -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>${jacoco.agent.arg}</argLine>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
          </systemPropertyVariables>
          <environmentVariables>
            <HTTP_PORT>${http.port}</HTTP_PORT>
            <LIBCAL_CLIENT1_ID>${libcal.client1.id}</LIBCAL_CLIENT1_ID>
            <LIBCAL_CLIENT2_ID>${libcal.client2.id}</LIBCAL_CLIENT2_ID>
            <LIBCAL_CLIENT1_SECRET>${libcal.client1.secret}</LIBCAL_CLIENT1_SECRET>
            <LIBCAL_CLIENT2_SECRET>${libcal.client2.secret}</LIBCAL_CLIENT2_SECRET>
            <LIBCAL_TOKEN_ENDPOINT>${libcal.token.endpoint}</LIBCAL_TOKEN_ENDPOINT>
            <LIBCAL_BASE_URL>${libcal.base.url}</LIBCAL_BASE_URL>
            <LIBCAL_AUTHENTICATION_RETRY_COUNT>${libcal.authentication.retry.count}</LIBCAL_AUTHENTICATION_RETRY_COUNT>
            <LIBCAL_AUTHENTICATION_RETRY_DELAY>${libcal.authentication.retry.delay}</LIBCAL_AUTHENTICATION_RETRY_DELAY>
            <LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>${libcal.authentication.expires_in.padding}</LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>
          </environmentVariables>
        </configuration>
      </plugin>

      <!-- Runs functional tests on the application's code -->
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <argLine>${jacoco.agent.arg}</argLine>
          <environmentVariables>
            <HTTP_PORT>${http.port}</HTTP_PORT>
            <LIBCAL_CLIENT1_ID>${libcal.client1.id}</LIBCAL_CLIENT1_ID>
            <LIBCAL_CLIENT2_ID>${libcal.client2.id}</LIBCAL_CLIENT2_ID>
            <LIBCAL_CLIENT1_SECRET>${libcal.client1.secret}</LIBCAL_CLIENT1_SECRET>
            <LIBCAL_CLIENT2_SECRET>${libcal.client2.secret}</LIBCAL_CLIENT2_SECRET>
            <LIBCAL_TOKEN_ENDPOINT>${libcal.token.endpoint}</LIBCAL_TOKEN_ENDPOINT>
            <LIBCAL_BASE_URL>${libcal.base.url}</LIBCAL_BASE_URL>
            <LIBCAL_AUTHENTICATION_RETRY_COUNT>${libcal.authentication.retry.count}</LIBCAL_AUTHENTICATION_RETRY_COUNT>
            <LIBCAL_AUTHENTICATION_RETRY_DELAY>${libcal.authentication.retry.delay}</LIBCAL_AUTHENTICATION_RETRY_DELAY>
            <LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>${libcal.authentication.expires_in.padding}</LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>
          </environmentVariables>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!-- Disable standard deploy; we publish a Docker image, not Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${deploy.plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Creates a Docker image and uses it for functional testing -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.plugin.version}</version>
        <configuration>
          <imagesMap>
            <image>
              <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
              <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
              <name>${docker.registry.account}${project.artifactId}:%l</name>
              <build>
                <args>
                  <ALPINE_TAG>${docker.alpine.version}</ALPINE_TAG>
                </args>
                <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
                <compression>gzip</compression>
                <assembly>
                  <inline>
                    <fileSets>
                      <fileSet>
                        <!-- The directory where we can find our Maven-built artifact -->
                        <directory>${project.basedir}/target/</directory>
                        <!-- We don't want directory structure on output, just the artifact -->
                        <outputDirectory>.</outputDirectory>
                        <includes>
                          <include>${project.artifactId}-${project.version}.jar</include>
                        </includes>
                      </fileSet>
                    </fileSets>
                  </inline>
                </assembly>
              </build>
              <run>
                <containerNamePattern>${project.artifactId}</containerNamePattern>
                <ports>
                  <!-- Start test container on an available host port -->
                  <port>${http.test.port}:${http.port}</port>
                </ports>
                <env>
                  <JAVA_OPTS>-Xmx${heap.size}</JAVA_OPTS>
                  <HTTP_PORT>${http.port}</HTTP_PORT>
                  <LIBCAL_CLIENT1_ID>${libcal.client1.id}</LIBCAL_CLIENT1_ID>
                  <LIBCAL_CLIENT2_ID>${libcal.client2.id}</LIBCAL_CLIENT2_ID>
                  <LIBCAL_CLIENT1_SECRET>${libcal.client1.secret}</LIBCAL_CLIENT1_SECRET>
                  <LIBCAL_CLIENT2_SECRET>${libcal.client2.secret}</LIBCAL_CLIENT2_SECRET>
                  <LIBCAL_TOKEN_ENDPOINT>${libcal.token.endpoint}</LIBCAL_TOKEN_ENDPOINT>
                  <LIBCAL_BASE_URL>${libcal.base.url}</LIBCAL_BASE_URL>
                  <LIBCAL_AUTHENTICATION_RETRY_COUNT>${libcal.authentication.retry.count}</LIBCAL_AUTHENTICATION_RETRY_COUNT>
                  <LIBCAL_AUTHENTICATION_RETRY_DELAY>${libcal.authentication.retry.delay}</LIBCAL_AUTHENTICATION_RETRY_DELAY>
                  <LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>${libcal.authentication.expires_in.padding}</LIBCAL_AUTHENTICATION_EXPIRES_IN_PADDING>
                </env>
                <!-- Test to make sure the server started as expected -->
                <wait>
                  <http>
                    <url>http://localhost:${http.test.port}/status</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                </wait>
              </run>
            </image>
          </imagesMap>
        </configuration>
        <executions>

          <!-- Builds the Docker image -->
          <execution>
            <id>docker-build</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>

          <!-- Creates and starts the Docker containers for integration testing -->
          <execution>
            <id>docker-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>

          <!-- Stops and removes the integration tests' Docker containers -->
          <execution>
            <id>docker-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <allContainers>true</allContainers>
            </configuration>
          </execution>

          <!-- Deploys the Hauth Docker image -->
          <execution>
            <id>docker-deploy</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
            <configuration>
              <images>
                <image>
                  <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
                  <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
                  <name>${docker.registry.account}${project.artifactId}:%l</name>
                </image>
              </images>
              <authConfig>
                <username>${docker.registry.username}</username>
                <password>${docker.registry.password}</password>
              </authConfig>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>linux-os</id>
      <activation>
        <os>
          <family>unix</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <classifier>linux-x86_64</classifier>
        </dependency>
      </dependencies>
    </profile>

    <!-- A profile to use to build an executable Jar file (which is the default) -->
    <profile>
      <id>uber-jar-compile</id>
      <activation>
        <property>
          <name>native.compile</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>vertx-package</id>
                <goals>
                  <goal>initialize</goal>
                  <goal>package</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- A profile for running the server in a live test mode -->
    <profile>
      <id>live</id>
      <properties>
        <!-- We don't need to run the standard tests in this mode -->
        <maven.test.skip>true</maven.test.skip>
        <jacoco.skip>true</jacoco.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-logging-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/main/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>libcal-proxy.yaml</include>
                      </includes>
                    </resource>
                    <resource>
                      <directory>${basedir}</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>logback-test.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>test-vertx-startup</id>
                <phase>test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <verticle>${mainClass}</verticle>
              <redeploy>${live.test.reloads}</redeploy>
              <jvmArgs>
                <jvmArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</jvmArg>
                <!-- Pass system props because the plugin doesn't take ENVs (and the config library doesn't care) -->
                <jvmArg>-DHTTP_PORT=${http.test.port}</jvmArg>
              </jvmArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>snyk-check</id>
      <activation>
        <property>
          <name>env.SNYK_TOKEN</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.snyk</groupId>
            <artifactId>snyk-maven-plugin</artifactId>
            <!-- Configurations have to be overridden in the executions' configuration elements -->
            <executions>
              <execution>
                <id>snyk-test</id>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <args>
                    <arg>--org=${env.UCLALIBRARY_SNYK_ORG}</arg>
                    <arg>--fail-on=all</arg>
                  </args>
                </configuration>
              </execution>
              <execution>
                <id>snyk-monitor</id>
                <goals>
                  <goal>monitor</goal>
                </goals>
                <configuration>
                  <args>
                    <arg>--org=${env.UCLALIBRARY_SNYK_ORG}</arg>
                    <arg>--fail-on=all</arg>
                  </args>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <!-- The parent project still uses the older repo locations; new projects use the below -->
  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <!-- The parent project to this project -->
  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>7.2.2</version>
  </parent>

</project>
